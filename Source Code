import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
from scipy import stats
from sklearn import preprocessing
from sklearn.preprocessing import scale
import plotly.express as px
warnings.filterwarnings('ignore')
sns.set(style="whitegrid")
categories = pd.read_json("IN_category_id.json")
categories
categories['items'][1]
category_dict = {}
for i in categories['items']:
category_dict[i['id']] = i['snippet']['title']
category_dict
df = pd.read_csv("IN_youtube_trending_data.csv")
df.head()
df.describe()
df.info()
df[df.video_id=="Iot0eF6EoNA"]
df.video_id.nunique()
df.channelTitle.nunique()
df.drop(["channelId","thumbnail_link"], inplace=True, axis=1)
df_maxViews = df.sort_values('view_count', ascending=False).drop_duplicates(['video_id'])
df_maxViews.sample(5)
df_minViews = df.sort_values('view_count', ascending=True).drop_duplicates(['video_id'])df_minViews.sample(5)
categories['items'][10]['snippet']['title']
def fetch_video_category(value):
return categories['items'][value]['snippet']['title']
#add the categories to the various dataframes:
df_maxViews["Video_Category"]=df_maxViews.categoryId.apply(fetch_video_category)
df_minViews["Video_Category"]=df_minViews.categoryId.apply(fetch_video_category)
df["Video_Category"]=df.categoryId.apply(fetch_video_category)
df.sample(5)
df.Video_Category.value_counts()
df['publishedAt'] = pd.to_datetime(df['publishedAt'])
df['trending_date'] = pd.to_datetime(df['trending_date'])
df.dtypes
df.isnull().sum()
df['channelTitle'] = df['channelTitle'].fillna("Other")
df['description'] = df['description'].fillna('No description provided')
df.isnull().sum()
df = df.drop_duplicates('title',keep='last')
import pandas as pd
# ... (Your previous code for loading data, defining fetch_video_category, etc.) ... # Make sure 'Video_Category' is created in df before creating df_maxViews
def fetch_video_category(value):
try:
return categories['items'][value]['snippet']['title']
except IndexError:
return 'Unknown' df["Video_Category"] = df.categoryId.apply(fetch_video_category)
df_maxViews = df.sort_values('view_count', ascending=False).drop_duplicates(['video_id'])
# Now, proceed with the groupby operations:
df_Views_Analysis =
df_maxViews.groupby('Video_Category')["view_count"].sum().reset_index()
df_Like = df_maxViews.groupby('Video_Category')["likes"].sum().reset_index()
df_Dislike = df_maxViews.groupby('Video_Category')["dislikes"].sum().reset_index()
df_Comments =
df_maxViews.groupby('Video_Category')["comment_count"].sum().reset_index()
df_Views_Analysis["Likes"] = df_Like.likes
df_Views_Analysis["Dislikes"] = df_Dislike.dislikes
pd.set_option("display.max_rows", None, "display.max_columns", None)
print(df_Views_Analysis.to_string())
channel_group_df = df.select_dtypes(include=['number']).groupby(by =
df['channelTitle']).sum()
channel_group_df = df.select_dtypes(include=['number']).groupby(by =
df['channelTitle']).sum()
channel_group_df[channel_group_df['view_count'] == channel_group_df['view_count'].max()]"""Channel With The Most View Count""" plt.figure(figsize=(20, 18))
plt.subplot(2, 2, 1)
var_list = ['view_count', 'likes', 'dislikes', 'comment_count']
color_palette = ['orange', 'red', 'green', 'blue', 'purple'] # Define your color list
for i in range(0, 4):
plt.subplot(2, 2, i + 1)
x = channel_group_df[var_list[i]].nlargest(5).index
y = channel_group_df[var_list[i]].nlargest(5)
sns.barplot(x=x, y=y, palette=color_palette) # Use the color list
plt.xticks(rotation=45, ha='right')
plt.title(f'Top 5 Channels by {var_list[i]}')
plt.tight_layout()
plt.show() """Most Watched Category""" category_group_df = df.drop(columns=['publishedAt', 'trending_date']).groupby(by=df['Video_Category']).sum()
category_group_df
category_group_df[category_group_df['view_count'] ==
category_group_df['view_count'].max()]
#Plotting the 5 categories with largest view count, likes, dislikes, comment_count}
plt.figure(figsize = (26,20))
plt.subplot(2,2,1)
var_list = ['view_count','likes','dislikes','comment_count']
color_palette = ['orange', 'red', 'green', 'blue', 'purple', 'pink']
for i in range(0,4):
plt.subplot(2,2,i+1)
x = category_group_df[var_list[i]].nlargest(6).index
y = category_group_df[var_list[i]].nlargest(6)
sns.barplot(x = x, y = y, palette=color_palette)
plt.xticks(rotation=45, ha='right')
plt.title(f'Top 6 Categories by {var_list[i]}')
plt.tight_layout()
plt.show() """Least Watched Category""
import matplotlib.pyplot as plt
plt.figure(figsize=(26, 18))
var_list = ['view_count', 'likes', 'dislikes', 'comment_count']
for i in range(0, 4):
plt.subplot(2, 2, i + 1)
x = category_group_df[var_list[i]].nsmallest(5).index
y = category_group_df[var_list[i]].nsmallest(5)
# Create the pie chart
plt.pie(y, labels=x, autopct='%1.1f%%', startangle=90)
plt.title(f'Bottom 5 Categories by {var_list[i]}')
plt.tight_layout()
plt.show()
df_Views_Analysis["Response_Percentage"] = round((( df_Views_Analysis.Likes +
df_Views_Analysis.Dislikes ) /df_Views_Analysis.view_count)* 100,2)
df_Views_Analysis """ Public Response vs Type of Videos""" plt.figure(figsize=(20, 10))
plt.title("Public Response vs Type of Videos")
plt.xticks(rotation=90)
# Display the Dashboard
display(dashboard_layout)
plt.figure(figsize=(20, 10))
plt.title("Public Response vs Type of Videos")
plt.xticks(rotation=90)
# Define your color palette
color_palette = 'viridis' # Example palette, you can choose others
sns.barplot(x=df_Views_Analysis.Video_Category, y=df_Views_Analysis.Response_Percentage, palette=color_palette) # Add the palette argument
plt.ylabel("Public Response (in percentage)")
plt.show()
df_maxViews[df_maxViews.Video_Category.isin(["Sports", "Classics"])].sample(5)
df_Views_Analysis["LikesPercentage"] =
df_Views_Analysis.Likes*100/df_Views_Analysis.view_count
df_Views_Analysis["DislikesPercentage"] =
df_Views_Analysis.Dislikes*100/df_Views_Analysis.view_count
df_Views_Analysis["Comments"] = df_Comments["comment_count"]
df_Views_Analysis["CommentsPercentage"] =
df_Views_Analysis.Comments*100/df_Views_Analysis.view_count
# Set the width and height of the figure
plt.figure(figsize=(20,10))
df_Views_Analysis.plot(x="Video_Category", y=["LikesPercentage", "DislikesPercentage", "CommentsPercentage"], kind="bar",figsize=(20,10)) """CommentsPercentage vs Type of Videos"""
plt.figure(figsize=(20, 10))
plt.title("CommentsPercentage vs Type of Videos")
plt.xticks(rotation=90)
# Create the line plot with a thicker line
sns.lineplot(x=df_Views_Analysis.Video_Category, y=df_Views_Analysis.CommentsPercentage, linewidth=5) # Set linewidth to 5 for a thicker line
plt.ylabel("Comments")
plt.show() """LikesPercentage vs Type of Videos""" plt.figure(figsize=(20, 10))
plt.xticks(rotation=90)
plt.title("LikesPercentage vs Type of Videos")
# Use a different color palette
sns.barplot(x=df_Views_Analysis.Video_Category, y=df_Views_Analysis.LikesPercentage, palette="viridis") # Example palette, you can choose others
plt.ylabel("Likes")
plt.show()
